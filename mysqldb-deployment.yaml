# Define a 'Persistent Volume Claim' (PVC) for MySQL Storage, dynamically provisioned by the cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   # This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 1Gi    # This will tell Kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of MySQL server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector: # mysql Pod should contain the same labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:5.7 # image from Docker Hub
          args:
            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: password

            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbName

            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbUser # Assuming you set this in the ConfigMap

          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:        # Mounting volume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql # This is the path in the container on which the mounting will take place.
      volumes:
        - name: mysql-persistent-storage # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
# Define a 'Service' To Expose MySQL to Other Services
apiVersion: v1
kind: Service
metadata:
  name: mysql  # DNS name
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306      # Expose port 3306 inside the Kubernetes cluster
      targetPort: 3306 # Map to container's MySQL port
  selector:       # mysql Pod should contain the same labels
    app: mysql
    tier: database
  clusterIP: None  # We use DNS, so ClusterIP is not relevant

---
# Define the Spring Boot Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  labels:
    app: springboot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: springboot
  template:
    metadata:
      labels:
        app: springboot
    spec:
      containers:
        - name: springboot-app
          image: spring-docker-k8s:latest
          ports:
            - containerPort: 5000
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mysql://mysql:3306/spring_dockerIn_k8s?createDatabaseIfNotExist=true"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbUser  # Reference the username from ConfigMap
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: password # Use password stored in Secret

---
# Define the Spring Boot Service to expose the application
apiVersion: v1
kind: Service
metadata:
  name: springboot-app  # DNS name
  labels:
    app: springboot
spec:
  ports:
    - port: 5000       # Expose Spring Boot app on port 5000
      targetPort: 5000
  selector:
    app: springboot    # Select pods with label 'app=springboot'
